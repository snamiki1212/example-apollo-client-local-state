{"version":3,"sources":["ReactiveVariables/state.ts","ReactiveVariables/components.tsx","Localstorage/state.ts","apollo/index.tsx","Localstorage/components.tsx","PureInMemoryCache/state.ts","PureInMemoryCache/components.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Noop","gql","GetElements","elementsVar","makeVar","ShowElements","useQuery","data","loading","error","message","elements","console","log","map","item","HandleElements","React","useState","text","setText","useMutation","update","result","noop","handleAdd","a","onChange","e","target","value","onClick","ClearElements","GetTodos","client","ApolloClient","cache","InMemoryCache","typePolicies","Query","fields","items","read","cached","todos","JSON","parse","window","localStorage","getItem","Provider","children","HandleTodos","prevData","readQuery","query","prev","newData","writeQuery","setItem","stringify","ShowTodos","ClearTodos","clear","GetItems","HandleItems","ShowItems","ClearItems","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4837b2f.chunk.js","sourcesContent":["import { gql, makeVar } from \"@apollo/client\";\n\nexport const Noop = gql`\n  mutation Noop {\n    items @client\n  }\n`;\n\nexport const GetElements = gql`\n  query GetElements {\n    elements @client\n  }\n`;\n\nexport const elementsVar = makeVar([] as string[]);\n","import React from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GetElements, Noop, elementsVar } from \"./state\";\n\nexport const ShowElements = () => {\n  const { data, loading, error } = useQuery(GetElements);\n  if (loading) return <div>loading...</div>;\n  if (error) return <div>error: {error.message}</div>;\n  if (!data || !data.elements) return <div>no data</div>;\n\n  const elements: Array<string> = data.elements;\n  console.log(\"DATA, data\", data);\n\n  return (\n    <div>\n      {elements?.map((item) => (\n        <div key={item}>{item}</div>\n      ))}\n    </div>\n  );\n};\n\nexport const HandleElements = () => {\n  const [text, setText] = React.useState<string>(\"\");\n  const [noop] = useMutation(Noop, {\n    update() {\n      const result = elementsVar([...elementsVar(), text]);\n      console.log(\"UPDATE:\", result);\n    },\n  });\n\n  const handleAdd = async () => {\n    await noop();\n  };\n\n  return (\n    <div>\n      <input onChange={(e) => setText(e.target.value)} value={text} />\n      <button onClick={handleAdd}>+</button>\n    </div>\n  );\n};\n\nexport const ClearElements = () => {\n  return <button onClick={() => elementsVar([])}>clear</button>;\n};\n","import { gql } from \"@apollo/client\";\n\nexport const Noop = gql`\n  mutation Noop {\n    items @client\n  }\n`;\n\nexport const GetTodos = gql`\n  query GetTodos {\n    todos @client\n  }\n`;\n","import React from \"react\";\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { elementsVar } from \"../ReactiveVariables/state\";\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          items: {\n            read(cached) {\n              return cached ?? [];\n            },\n          },\n          todos: {\n            read() {\n              return JSON.parse(window.localStorage.getItem(\"TODOS\") ?? \"[]\");\n            },\n          },\n          elements: {\n            read() {\n              return elementsVar();\n            },\n          },\n        },\n      },\n    },\n  }),\n});\n\nexport const Provider: React.FC = ({ children }) => {\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\n","import React from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { Noop, GetTodos } from \"./state\";\nimport { client } from \"../apollo\";\n\nexport const HandleTodos = () => {\n  const [text, setText] = React.useState<string>(\"\");\n  const [noop] = useMutation(Noop, {\n    update(cache) {\n      const prevData = cache.readQuery({\n        query: GetTodos,\n      });\n      const prev = (prevData as any)?.todos;\n\n      const newData = [...prev, text];\n\n      const result = cache.writeQuery({\n        query: GetTodos,\n        data: { todos: newData },\n      });\n\n      window.localStorage.setItem(\"TODOS\", JSON.stringify(newData));\n\n      console.log(\"UPDATE:\", result);\n    },\n  });\n\n  const handleAdd = async () => {\n    await noop();\n  };\n\n  return (\n    <div>\n      <input onChange={(e) => setText(e.target.value)} value={text} />\n      <button onClick={handleAdd}>+</button>\n    </div>\n  );\n};\n\nexport const ShowTodos = () => {\n  const { data, loading, error } = useQuery(GetTodos);\n  if (loading) return <div>loading...</div>;\n  if (error) return <div>error: {error.message}</div>;\n  if (!data || !data.todos) return <div>no data</div>;\n\n  const todos: Array<string> = data.todos;\n\n  return (\n    <div>\n      {todos?.map((item) => (\n        <div key={item}>{item}</div>\n      ))}\n    </div>\n  );\n};\n\nexport const ClearTodos = () => {\n  const clear = () => {\n    window.localStorage.clear();\n    client.writeQuery({\n      query: GetTodos,\n      data: { todos: [] },\n    });\n  };\n\n  return <button onClick={clear}>Clear</button>;\n};\n","import { gql } from \"@apollo/client\";\n\nexport const GetItems = gql`\n  query GetItems {\n    items @client\n  }\n`;\n\nexport const Noop = gql`\n  mutation Noop {\n    items @client\n  }\n`;\n","import React from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { Noop, GetItems } from \"./state\";\nimport { client } from \"../apollo\";\n\nexport const HandleItems = () => {\n  const [text, setText] = React.useState<string>(\"\");\n  const [noop] = useMutation(Noop, {\n    update(cache) {\n      const prevData = cache.readQuery({\n        query: GetItems,\n      });\n      const prev = (prevData as any)?.items;\n      const newData = [...prev, text];\n\n      const result = cache.writeQuery({\n        query: GetItems,\n        data: { items: newData },\n      });\n\n      console.log(\"UPDATE:\", result);\n      console.log(\"new Items\", newData);\n    },\n  });\n\n  const handleAdd = async () => {\n    await noop();\n  };\n\n  return (\n    <div>\n      <input onChange={(e) => setText(e.target.value)} value={text} />\n      <button onClick={handleAdd}>+</button>\n    </div>\n  );\n};\n\nexport const ShowItems = () => {\n  const { data, loading, error } = useQuery(GetItems);\n  if (loading) return <div>loading...</div>;\n  if (error) return <div>error: {error.message}</div>;\n  if (!data || !data.items) return <div>no data</div>;\n\n  const items: Array<string> = data.items;\n  console.log(\"ITEMS\", items);\n\n  return (\n    <div>\n      {items?.map((item) => (\n        <div key={item}>{item}</div>\n      ))}\n    </div>\n  );\n};\n\nexport const ClearItems = () => {\n  const clear = () => {\n    client.writeQuery({\n      query: GetItems,\n      data: { items: [] },\n    });\n  };\n  return <button onClick={clear}>clear</button>;\n};\n","import React from \"react\";\nimport {\n  ShowElements,\n  ClearElements,\n  HandleElements,\n} from \"./ReactiveVariables/components\";\nimport { ShowTodos, ClearTodos, HandleTodos } from \"./Localstorage/components\";\nimport {\n  ShowItems,\n  ClearItems,\n  HandleItems,\n} from \"./PureInMemoryCache/components\";\nimport { Provider } from \"./apollo\";\n\nfunction App() {\n  return (\n    <Provider>\n      <div>\n        <h3>InMemoryCache</h3>\n        <HandleItems />\n        <ShowItems />\n        <ClearItems />\n      </div>\n\n      <div>\n        <h3>LocalStorage</h3>\n        <HandleTodos />\n        <ShowTodos />\n        <ClearTodos />\n      </div>\n\n      <div>\n        <h3>Reactive Variables</h3>\n        <HandleElements />\n        <ShowElements />\n        <ClearElements />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}